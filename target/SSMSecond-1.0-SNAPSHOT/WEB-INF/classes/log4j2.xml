<?xml version="1.0" encoding="UTF-8"?>
<!-- status属性，这个属性表示log4j2本身的日志信息打印级 -->
<configuration status="error">
	<!--先定义所有的appender -->
	<appenders>
		<!--这个输出控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="trace" onMatch="ACCEPT"
				onMismatch="DENY" />
			<!--这个都知道是输出日志的格式 :http://logging.apache.org/log4j/2.x/manual/layouts.html
				%d{HH:mm:ss.SSS} 表示输出到毫秒的时间
				%t 输出当前线程名称
				%-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
				%logger 输出logger名称，因为Root Logger没有名称，所以没有输出
				%msg 日志文本
				%n 换行
				%F 输出所在的类文件名，如Client.java
				%L 输出行号
				%M 输出所在方法名
				%l  输出语句所在的行数, 包括类名、方法名、文件名、行数
				%m 输出代码中指定的消息
			
				%class 输出所属的类，通常就是所在类的全名
				%xEx		
				-->
			<PatternLayout
				pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
		</Console>
		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 有关属性替换：http://logging.apache.org/log4j/2.x/manual/lookups.html -->
		<File name="log" fileName="D:/Study/log/test.log" append="false">
			<PatternLayout
				pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
		</File>

		<!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFile" fileName="D:/Study/logs/app.log"
			filePattern="log/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz">
			<PatternLayout
				pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n" />
			<SizeBasedTriggeringPolicy size="50MB" />
		</RollingFile>
	</appenders>
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<loggers>
		<!--建立一个默认的root的logger -->
		<root level="warn">
			<appender-ref ref="RollingFile" />
			<appender-ref ref="Console" />
		</root>
		<!-- additivity:子Logger 是否继承 父Logger 的 输出源（appender） 的标志位 -->
		<Logger name="com.qtt.ssm" level="debug" additivity="false">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFile" />

		</Logger>
	</loggers>
</configuration>